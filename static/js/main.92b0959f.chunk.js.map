{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChangeRRR","event","searchfield","target","value","fetch","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","React","ReactDOM","render","document","getElementById"],"mappings":"yMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCOCQ,G,MAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,kDAAf,UACI,qBAAMC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,uBACrB,gCACI,6BAAKF,IACL,4BAAIC,YCgBLK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OAEI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIV,KAAMO,EAAOG,GAAGV,KAChBE,GAAIK,EAAOG,GAAGR,GACdD,MAAOM,EAAOG,GAAGT,OAHZM,EAAOG,GAAGR,UCE5BS,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,8BACI,uBAAOT,UAAU,mCACbU,KAAK,SACLC,YAAY,kBACZC,SAAUH,OCIXI,EAVA,SAACC,GAEZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCmBJC,E,kDAtBX,WAAaN,GAAQ,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHE,E,8DAOFC,EAAOC,GAErBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACJ,oEAGJG,KAAKX,MAAMK,a,GAnBEQ,aCqDbC,E,kDA7Cb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAcRe,kBAAoB,SAACC,GAGnB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAhBzC,EAAKZ,MAAQ,CACXjB,OAAS,GACT2B,YAAa,IAJE,E,gEAQE,IAAD,OAClBG,MAAM,8CACH5C,MAAK,SAAA6C,GAAQ,OAAIA,EAASC,UAC1B9C,MAAK,SAAA+C,GAAU,EAAKX,SAAS,CAACtB,OAAQiC,S,+BAUhC,IAAD,EACwBZ,KAAKJ,MAA7BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YACVO,EAAelC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAGvD,OAAQrC,EAAOuC,OAGX,sBAAK3C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,wBACA,0DACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,oBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAQkC,WAR1B,gD,GA9BaM,IAAMjB,WCDzBkB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhD7D,M","file":"static/js/main.92b0959f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\n            <img  alt='robot' src={`https://robohash.org/${id}.png?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\n\nconst CardList = ({robots}) => {\n    return (\n        \n        <div>\n            {\n                robots.map((user, i) => {\n                    return ( \n                        <Card \n                            key={robots[i].id} \n                            name={robots[i].name} \n                            id={robots[i].id} \n                            email={robots[i].email}\n                        />\n                        )\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div>\n            <input className='pa3 ba b--green bg-lightest-blue'\n                type='serach' \n                placeholder='search robot...'  \n                onChange={searchChange}               \n            />\n        </div>        \n    )\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) => { \n    //scroll wraps other components, it need to render its children\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n        \n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        //kind-of try..catch\n        this.setState({hasError: true});\n    }\n\n\n    render() {\n        if (this.state.hasError) {\n            return <h1> Oooops. That is not good.  @ _ @ </h1>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport './App.css'\n// import {robots} from '../robots'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nclass App  extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots : [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() { //no arrow function as it's part of react\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {this.setState({robots: users})});\n    \n  }\n\n  onSearchChangeRRR = (event) => { //use such syntax to make sure \"this\" refers to App, not calling function\n    // console.log(event.target.value);\n    // this.state.searchfield = event.target.value; /// DONT DO IT THAT WAY!    \n    this.setState({searchfield: event.target.value});\n  }\n\n  render () {\n    const { robots, searchfield } = this.state;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n     \n    return !robots.length ?\n      <h1>Loading...</h1> :      \n      (\n        <div className=\"tc\">\n          <h1 className=\"f2\">RoboFriend</h1>\n          <p>welcome to robofriend app</p>\n          <SearchBox searchChange={this.onSearchChangeRRR}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filterRobots}/>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    \n  }\n}\n// test for git only ss\nexport default App; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App/>, document.getElementById('root') );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}